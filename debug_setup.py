#!/usr/bin/env python3
"""
Script de diagn√≥stico para verificar a configura√ß√£o do projeto CrewAI
"""

import os
import sys
from pathlib import Path


def check_python_version():
    """Verifica a vers√£o do Python"""
    version = sys.version_info
    print(f"Python {version.major}.{version.minor}.{version.micro}")
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå ERRO: Python 3.8+ √© necess√°rio")
        return False
    print("‚úÖ Vers√£o do Python OK")
    return True


def check_dependencies():
    """Verifica se as depend√™ncias est√£o instaladas"""
    required_packages = [
        "crewai",
        "pandas",
        "matplotlib",
        "seaborn",
        "fastapi",
        "uvicorn",
        "python-dotenv",
        "openai",
    ]

    missing = []
    for package in required_packages:
        try:
            __import__(package.replace("-", "_"))
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package} - N√ÉO INSTALADO")
            missing.append(package)

    if missing:
        print(f"\nüì¶ Para instalar os pacotes faltando:")
        print(f"pip install {' '.join(missing)}")
        return False

    return True


def check_crewai_version():
    """Verifica a vers√£o do CrewAI"""
    try:
        import crewai

        version = getattr(crewai, "__version__", "desconhecida")
        print(f"CrewAI vers√£o: {version}")

        # Testa importa√ß√µes espec√≠ficas
        from crewai import LLM, Agent, Crew, Process, Task

        print("‚úÖ Importa√ß√µes do CrewAI OK")
        return True
    except Exception as e:
        print(f"‚ùå Erro com CrewAI: {e}")
        return False


def check_env_file():
    """Verifica o arquivo .env"""
    env_path = Path(".env")
    if not env_path.exists():
        print("‚ùå Arquivo .env n√£o encontrado")
        print("Crie um arquivo .env com:")
        print("OPENAI_API_KEY=sua-chave-aqui")
        return False

    from dotenv import load_dotenv

    load_dotenv()

    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        print("‚ùå OPENAI_API_KEY n√£o configurada no .env")
        return False

    if api_key.startswith("sk-") and len(api_key) > 20:
        print("‚úÖ OPENAI_API_KEY configurada")
        return True
    else:
        print("‚ö†Ô∏è OPENAI_API_KEY parece inv√°lida")
        return False


def check_directories():
    """Verifica se os diret√≥rios necess√°rios existem"""
    dirs = ["uploads", "outputs", "frontend"]
    for dir_name in dirs:
        dir_path = Path(dir_name)
        if dir_path.exists():
            print(f"‚úÖ Diret√≥rio {dir_name}/")
        else:
            print(f"‚ö†Ô∏è Diret√≥rio {dir_name}/ n√£o existe (ser√° criado automaticamente)")


def test_openai_connection():
    """Testa conex√£o com OpenAI"""
    try:
        import os

        from crewai import LLM

        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            print("‚ùå N√£o √© poss√≠vel testar - API key n√£o configurada")
            return False

        llm = LLM(model="gpt-4o-mini", api_key=api_key)
        print("‚úÖ Configura√ß√£o LLM criada com sucesso")
        return True

    except Exception as e:
        print(f"‚ùå Erro ao configurar LLM: {e}")
        return False


def test_basic_crewai():
    """Teste b√°sico do CrewAI"""
    try:
        import os

        from crewai import LLM, Agent, Crew, Task

        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            print("‚ùå N√£o √© poss√≠vel testar - API key n√£o configurada")
            return False

        llm = LLM(model="gpt-4o-mini", api_key=api_key)

        # Criar um agente simples
        agent = Agent(
            role="Test Agent", goal="Test goal", backstory="Test backstory", llm=llm
        )

        print("‚úÖ Agente criado com sucesso")
        return True

    except Exception as e:
        print(f"‚ùå Erro ao criar agente: {e}")
        import traceback

        traceback.print_exc()
        return False


def main():
    """Fun√ß√£o principal de diagn√≥stico"""
    print("üîç DIAGN√ìSTICO DO SISTEMA CrewAI")
    print("=" * 50)

    checks = [
        ("Vers√£o Python", check_python_version),
        ("Depend√™ncias", check_dependencies),
        ("CrewAI", check_crewai_version),
        ("Arquivo .env", check_env_file),
        ("Diret√≥rios", check_directories),
        ("Configura√ß√£o LLM", test_openai_connection),
        ("Teste b√°sico CrewAI", test_basic_crewai),
    ]

    results = []
    for name, check_func in checks:
        print(f"\nüìã Verificando {name}...")
        try:
            result = check_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå Erro na verifica√ß√£o: {e}")
            results.append((name, False))

    print("\n" + "=" * 50)
    print("üìä RESUMO:")

    passed = sum(1 for _, result in results if result)
    total = len(results)

    for name, result in results:
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {name}")

    print(f"\n{passed}/{total} verifica√ß√µes passaram")

    if passed == total:
        print("\nüéâ Sistema configurado corretamente!")
    else:
        print(
            f"\n‚ö†Ô∏è {total - passed} problemas encontrados. Corrija-os antes de continuar."
        )


if __name__ == "__main__":
    main()
