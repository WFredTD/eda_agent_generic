import os
import threading
import time
from pathlib import Path

import pandas as pd
from crewai import LLM, Agent, Crew, Process, Task
from dotenv import load_dotenv

from custom_tool_generico import PlotarGraficoTool, QueryCSVGenerico

load_dotenv()


class FluxoEDA:
    """
    Orquestrador principal para a An√°lise Explorat√≥ria de Dados.
    """

    def __init__(self, caminho_csv: str):
        self.caminho_csv = caminho_csv
        # Carregar o DataFrame na inicializa√ß√£o para que todos os agentes o utilizem
        try:
            self.df = pd.read_csv(caminho_csv)
            print(f"‚úÖ DataFrame carregado com sucesso do arquivo: {self.caminho_csv}")
            print(f"üìä Shape: {self.df.shape}")
            print(f"üìã Colunas dispon√≠veis: {list(self.df.columns)}")
        except Exception as e:
            raise Exception(f"‚ùå Erro ao carregar o CSV: {e}")

    def executar(self, pergunta: str) -> dict | str:
        """
        Executa o fluxo de trabalho do agente, com segrega√ß√£o estrita.

        Args:
            pergunta (str): A pergunta do usu√°rio.

        Returns:
            dict | str: Dicion√°rio com caminho do gr√°fico (se for gr√°fico) ou string com a resposta textual.
        """
        # Verificar configura√ß√£o da API Key
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            raise Exception("OPENAI_API_KEY n√£o encontrada. Configure no arquivo .env")

        # Configurar LLM explicitamente
        llm_config = LLM(model="gpt-4o-mini", api_key=api_key, temperature=0.1)

        # Injetar o DataFrame nas ferramentas
        query_tool = QueryCSVGenerico()
        query_tool.df = self.df
        plot_tool = PlotarGraficoTool()
        plot_tool.df = self.df

        # --- DEFINI√á√ÉO DOS AGENTES COM PROMPTS REFOR√áADOS ---

        # Agente 1: Analista de Dados (An√°lise Pura)
        analista_de_dados = Agent(
            role="Especialista em An√°lise de Dados e Programa√ß√£o Python",
            goal="Traduzir a pergunta do usu√°rio em c√≥digo Python para analisar um DataFrame chamado 'df' e extrair insights relevantes.",
            backstory=(
                "Voc√™ √© um cientista de dados s√™nior, com foco exclusivo em An√°lise Explorat√≥ria de Dados (EDA). "
                "Sua miss√£o √© usar seu conhecimento em 'pandas' para responder a perguntas, **sempre se baseando apenas nos dados do DataFrame 'df'**. "
                "Seu processo de pensamento √© estritamente l√≥gico e factual. Voc√™ n√£o tem conhecimento do mundo real ou de outros datasets al√©m do que √© fornecido. "
                "Voc√™ usa a ferramenta 'Ferramenta de execucao de codigo de consulta a um CSV' para executar c√≥digo Python. "
                "Seu c√≥digo deve ser otimizado para extrair a informa√ß√£o solicitada e o resultado final deve ser atribu√≠do √† vari√°vel 'resultado'. "
                "**IMPORTANTE**: Se a pergunta n√£o puder ser respondida com os dados dispon√≠veis no DataFrame, sua resposta deve ser: 'N√£o √© poss√≠vel responder a essa pergunta com os dados dispon√≠veis.' "
                "Voc√™ **NUNCA** cria gr√°ficos; seu √∫nico trabalho √© a an√°lise num√©rica e estat√≠stica. "
                "Siga o seguinte formato para pensar e agir:\n"
                "Thought: Avalie a pergunta. Determine qual c√≥digo Python √© necess√°rio para obter a resposta. "
                "Action: Use a ferramenta 'Ferramenta de execucao de codigo de consulta a um CSV' com o c√≥digo Python planejado. "
                "Action Input: O c√≥digo Python para execu√ß√£o. "
                "Observation: O resultado da execu√ß√£o do c√≥digo. "
                "Thought: Analise a 'Observation' e use-a para formar uma resposta clara. Se a 'Observation' indicar um erro, reavalie a abordagem. "
            ),
            tools=[query_tool],
            verbose=True,
            memory=True,
            llm=llm_config,
        )

        # Agente 2: Gerador de Gr√°ficos (Apenas Gera√ß√£o de Imagem)
        gerador_de_graficos = Agent(
            role="Especialista em Gera√ß√£o de Gr√°ficos de Dados",
            goal="Gerar o gr√°fico solicitado pelo usu√°rio usando a ferramenta e retornar APENAS o caminho do arquivo de imagem.",
            backstory=(
                "Voc√™ √© um t√©cnico de visualiza√ß√£o altamente focado. Sua √∫nica tarefa √© traduzir solicita√ß√µes de gr√°ficos em uma entrada de ferramenta perfeita. "
                "Voc√™ **NUNCA** deve analisar os dados ou escrever qualquer texto de resumo/conclus√£o. "
                "Seu output final deve ser estritamente o caminho do arquivo de imagem PNG gerado pela ferramenta. "
                "Voc√™ usa a ferramenta 'Ferramenta de geracao de grafico', que espera os argumentos tipo_grafico, colunas e titulo. "
                "**REGRA DE FALHA:** Se a ferramenta retornar um erro interno (por exemplo, colunas n√£o num√©ricas ou tipo de gr√°fico incorreto), voc√™ DEVE retornar a seguinte mensagem EXATA como sua Final Answer: 'Erro na Gera√ß√£o: Ocorreu um erro interno. Verifique se as colunas s√£o num√©ricas e tente novamente.' "
                "**REGRA DE FALHA E OTIMIZA√á√ÉO:** Se a 'Observation' da sua ferramenta retornar a palavra '[ERRO]', '[AVISO]' ou a mensagem 'Nenhuma coluna num√©rica v√°lida', voc√™ DEVE imediatamente PARAR AS TENTATIVAS e retornar a seguinte mensagem EXATA como sua Final Answer: 'Erro na Gera√ß√£o: A solicita√ß√£o n√£o p√¥de ser atendida. Verifique se as colunas s√£o num√©ricas e se o tipo de gr√°fico √© apropriado.'"
            ),
            tools=[plot_tool],
            verbose=True,
            memory=True,
            llm=llm_config,
        )

        # Agente 3: Consultor Estrat√©gico (An√°lise e Conclus√£o Pura)
        conclusor_estrategico = Agent(
            role="Consultor Estrat√©gico de Dados e Validador de An√°lise",
            goal="Sintetizar resultados de an√°lises e visualiza√ß√µes em conclus√µes estrat√©gicas e de alto n√≠vel, garantindo a coer√™ncia e a relev√¢ncia das informa√ß√µes.",
            backstory=(
                "Voc√™ √© um consultor de alto n√≠vel e a √∫ltima linha de defesa contra alucina√ß√µes. "
                "Sua miss√£o √©: 1. Revisar as informa√ß√µes para garantir que s√£o coerentes e relevantes para a pergunta original. 2. Identificar e ignorar quaisquer informa√ß√µes que pare√ßam incorretas ou alucinadas. 3. Usar a mem√≥ria (incluindo gr√°ficos gerados anteriormente) para basear suas conclus√µes, mas **NUNCA** gerar ou descrever um gr√°fico na resposta final. "
                "Voc√™ deve se basear APENAS nos fatos validados e nas suas an√°lises internas para criar uma narrativa coesa e objetiva. "
                "Voc√™ **N√ÉO** deve adicionar contexto de neg√≥cio (como 'vendas', 'marketing', 'clientes') que n√£o esteja explicitamente no output da an√°lise."
            ),
            verbose=True,
            memory=True,
            llm=llm_config,
        )

        # --- L√ìGICA CONDICIONAL DE DOIS CAMINHOS (GR√ÅFICO VS AN√ÅLISE) ---

        # Palavras que indicam uma solicita√ß√£o IMPERATIVA de gr√°fico (Caminho 1)
        palavras_grafico_imperativo = ["gere", "crie", "fa√ßa", "mostre", "plote"]
        palavras_grafico = [
            "gr√°fico",
            "grafico",
            "plot",
            "visualiza√ß√£o",
            "visualizacao",
            "chart",
            "distribui√ß√£o",
            "distribuicao",
            "histograma",
            "boxplot",
            "dispers√£o",
            "barras",
            "scatter",
        ]

        is_imperative_graph_request = any(
            word in pergunta.lower() for word in palavras_grafico_imperativo
        ) and any(word in pergunta.lower() for word in palavras_grafico)

        if is_imperative_graph_request:
            # CAMINHO 1: Solicita√ß√£o de Gera√ß√£o de Gr√°fico (Apenas Gera√ß√£o)

            # Ajustando a tarefa de gr√°fico para o novo formato de argumento (separado, n√£o dict dentro de input_data)
            tarefa_grafico = Task(
                description=(
                    f"Gere o gr√°fico solicitado pelo usu√°rio: '{pergunta}'.\n\n"
                    f"Colunas do DataFrame dispon√≠veis: {list(self.df.columns)}\n\n"
                    "INSTRU√á√ÉO DE SA√çDA: O Agente de Visualiza√ß√£o **DEVE** retornar APENAS o caminho do arquivo PNG gerado. N√£o gere texto descritivo ou de an√°lise."
                ),
                expected_output="O caminho completo do arquivo PNG do gr√°fico gerado na pasta outputs/, sem qualquer texto adicional.",
                agent=gerador_de_graficos,
            )

            tarefas = [tarefa_grafico]

        else:
            # CAMINHO 2: An√°lise/Conclus√£o (An√°lise Pura, com uso da mem√≥ria)

            # Tarefa 1: An√°lise Factual
            tarefa_analise = Task(
                description=(
                    f"Com base na pergunta do usu√°rio: '{pergunta}', execute uma an√°lise de dados.\n\n"
                    f"Informa√ß√µes do dataset:\n"
                    f"- Shape: {self.df.shape}\n"
                    f"- Colunas dispon√≠veis: {list(self.df.columns)}\n\n"
                    "Sua tarefa √© usar a ferramenta `Ferramenta de execucao de codigo de consulta a um CSV` para escrever e executar um c√≥digo Python que responda diretamente √† pergunta. "
                    "O resultado da sua an√°lise, em formato de texto, deve ser conciso e objetivo. "
                    "Voc√™ deve se ater estritamente aos dados extra√≠dos e n√£o fazer suposi√ß√µes ou usar conhecimento externo."
                ),
                expected_output="Uma an√°lise textual clara, baseada em dados, com estat√≠sticas e fatos obtidos do DataFrame.",
                agent=analista_de_dados,
            )

            # Tarefa 2: Conclus√£o Estrat√©gica (Usando An√°lise Factual + Mem√≥ria)
            tarefa_conclusao = Task(
                description=(
                    "Sintetize todos os resultados das tarefas anteriores em uma resposta final clara, baseada **estritamente na an√°lise de dados**. "
                    "Voc√™ deve focar em apresentar os fatos e as conclus√µes obtidas diretamente do DataFrame. "
                    "N√£o adicione contexto de neg√≥cio (como 'vendas', 'marketing', 'clientes') que n√£o est√° presente nos dados. "
                    "\n\nInclua:\n"
                    "1. Um resumo dos principais achados da an√°lise (por exemplo, estat√≠sticas, distribui√ß√µes, outliers).\n"
                    "2. Se gr√°ficos anteriores (na mem√≥ria) forem relevantes, use-os como base para a sua an√°lise, mas **NUNCA** mencione o caminho do arquivo ou inclua imagens na sua resposta.\n"
                    "3. Conclus√µes objetivas sobre os dados, como padr√µes identificados ou a aus√™ncia de correla√ß√µes significativas.\n"
                    "4. Recomenda√ß√µes baseadas nos achados, focando em como aprofundar a an√°lise de dados (ex: 'recomenda-se investigar os outliers', 'explorar a correla√ß√£o entre V1 e V2').\n\n"
                    "Formato: Resposta clara, objetiva e puramente anal√≠tica para o usu√°rio."
                ),
                expected_output="Resposta final estruturada com insights e conclus√µes focadas em dados, sem infer√™ncias de neg√≥cio.",
                agent=conclusor_estrategico,
            )

            tarefas = [tarefa_analise, tarefa_conclusao]

        # Criar a Crew com processo SEQUENCIAL
        crew = Crew(
            agents=[analista_de_dados, gerador_de_graficos, conclusor_estrategico],
            tasks=tarefas,
            process=Process.sequential,
            verbose=True,
        )

        try:
            # Executar o fluxo com timeout
            result_container = [None]
            exception_container = [None]

            def run_crew():
                try:
                    result_container[0] = crew.kickoff()
                except Exception as e:
                    exception_container[0] = e

            crew_thread = threading.Thread(target=run_crew)
            crew_thread.daemon = True
            crew_thread.start()

            crew_thread.join(timeout=300)

            if crew_thread.is_alive():
                print("‚è∞ Timeout: Execu√ß√£o excedeu 5 minutos")
                return "A an√°lise est√° levando mais tempo que o esperado. Tente uma pergunta mais simples."

            if exception_container[0]:
                raise exception_container[0]

            result = result_container[0]

            # Obter o texto final do resultado da crew
            result_text = str(result.output if hasattr(result, "output") else result)

            # --- SEGREGA√á√ÉO DE RETORNO FINAL ---

            if is_imperative_graph_request:
                # Se for um pedido de gr√°fico, o resultado do kickoff √© o caminho do arquivo (do gerador_de_graficos)
                # O m√©todo `api.py` ir√° usar esse caminho para exibir o gr√°fico.

                # Buscar o arquivo gerado (√© a maneira mais segura)
                outputs_dir = Path("outputs")
                chart_files = (
                    list(outputs_dir.glob("*.png")) if outputs_dir.exists() else []
                )

                if chart_files:
                    # Pegar o gr√°fico mais recente (que √© o que o agente acabou de gerar)
                    latest_chart = max(chart_files, key=lambda p: p.stat().st_mtime)
                    chart_name = latest_chart.name
                    print(f"üìä Gr√°fico detectado: {chart_name}")

                    # Retorna o formato esperado pela API para exibir a imagem no chat
                    return {
                        "text": "",  # Sem texto, apenas a imagem
                        "image_url": f"http://localhost:8000/outputs/{chart_name}",
                    }

                # Fallback em caso de erro na gera√ß√£o
                return "O agente tentou gerar o gr√°fico, mas n√£o encontrou o arquivo na pasta de sa√≠da. Verifique o log do terminal."

            else:
                # Retorna apenas o texto de conclus√£o
                print(f"‚úÖ Resultado final processado: {result_text[:200]}...")
                return {"response": result_text}

        except Exception as e:
            print(f"‚ùå Erro na execu√ß√£o do crew: {e}")
            import traceback

            traceback.print_exc()

            # Tentar limpeza de recursos
            try:
                import matplotlib.pyplot as plt

                plt.close("all")
            except:
                pass

            return {
                "error": f"Erro durante a an√°lise: {str(e)}. Tente reformular sua pergunta."
            }
        finally:
            # Garantir limpeza
            try:
                import matplotlib.pyplot as plt

                plt.close("all")
            except:
                pass
